Notes on Rcpp-introduction

See abstract and introduction for useful information about Rcpp
(useful for the report to introduce Rcpp)

Given a C++ function which we want to call from R:
the inputs should be of type SEXP
--> they can be easily converted to Rcpp C++ classes interfacing
R with basic types and STL containers
--> output is automatically converted to SEXP

To create a numeric vector out of single numbers: use static method create
	Rcpp::NumericVector v = Rcpp::NumericVector::create(123.45, 67.89);
	
All Rcpp classes (e.g. NumericVector) inherits RObject, the base Rcpp class
which store a SEXP object and deploy methods to access it as R would deploy
In particular, the C++ class takes care of protecting SEXP from R garbage collector,
then the user is relieved from using the macros PROTECT and UNPROTECT
For more details, see Section 2.2

list: equivalent in R of C++ struct

Rcpp::checkUserInterrupt(): return TRUE if the user has forced the program to stop,
FALSE otherwise
--> useful if the program should run for a long time

To export a function from C++ to R:
	//[[Rcpp::export]]
To export specifying the name:
	//[[Rcpp::export(name="<function_name>")]]


